<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IsPackable>true</IsPackable>
    <NoPackageAnalysis>true</NoPackageAnalysis>
    <BuildOutputTargetFolder>analyzers/dotnet/cs</BuildOutputTargetFolder>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <GenerateDependencyFile>true</GenerateDependencyFile>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      Because this project only has a single target framework, the condition in
      Directory.Build.props does not appear to work. This is a workaround for that.
    -->
    <Nullable>annotations</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <Description>Contains Roslyn source generator that transpiles Razor templates into C# classes</Description>
    <!-- This package has runtime dependencies so it should NOT be marked as development dependency! -->
    <DevelopmentDependency>false</DevelopmentDependency>
  </PropertyGroup>

  <ItemGroup>
    <None Include="MiniRazor.CodeGen.props" Pack="true" PackagePath="build" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Razor.Language" Version="6.0.10" PrivateAssets="all" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.3.1" PrivateAssets="all" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="all" />
    <PackageReference Include="Nullable" Version="1.3.1" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <!-- Public dependency on MiniRazor.Runtime because it's required during runtime -->
    <ProjectReference Include="..\MiniRazor.Runtime\MiniRazor.Runtime.csproj" />

    <!-- Private dependency on MiniRazor.Compiler because it's required only during codegen -->
    <ProjectReference Include="..\MiniRazor.Compiler\MiniRazor.Compiler.csproj" PrivateAssets="all" />
  </ItemGroup>

  <!-- Embed package references inside this package -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>
      $(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage
    </TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <BuildOutputInPackage
        Include="@(ReferenceCopyLocalPaths)"
        TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
    </ItemGroup>
  </Target>

  <!-- Embed the generated deps.json file inside this package -->
  <Target
    Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput"
    BeforeTargets="BuiltProjectOutputGroup"
    Condition="'$(GenerateDependencyFile)' == 'true'">
    <ItemGroup>
      <BuiltProjectOutputGroupOutput
        Include="$(ProjectDepsFilePath)"
        TargetPath="$(ProjectDepsFileName)"
        FinalOutputPath="$(ProjectDepsFilePath)" />
    </ItemGroup>
  </Target>

  <!-- Expose package references to dependent projects (only needed locally, not when distributed through NuGet) -->
  <PropertyGroup>
    <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
  </PropertyGroup>

  <Target Name="GetDependencyTargetPaths">
    <ItemGroup>
      <TargetPathWithTargetPlatformMoniker
        Include="../MiniRazor.Compiler/bin/$(Configuration)/$(TargetFramework)/MiniRazor.Compiler.dll"
        IncludeRuntimeDependency="false" />
      <TargetPathWithTargetPlatformMoniker
        Include="$(PKGMicrosoft_AspNetCore_Razor_Language)/lib/$(TargetFramework)/*.dll"
        IncludeRuntimeDependency="false" />
    </ItemGroup>
  </Target>

</Project>